{
  "version": "3.7.0",
  "study": {
    "name": "ALEX_V3_run1", // 0bat mean: -79.56335297601616, -netload_settle: 8.129579796950543
      "description": "",
      "start_datetime": "2016-08-01 0:0:0", // do not change,
      "start_datetime_sequence": "sequential", // do not change,
      "timezone": "America/Vancouver", // do not change,
      "days": 31, //Change if we want more days, goes up to 365
      "time_step_size": 3600, // do not change, 1 hour
      "generations": 1000 //Change if we want more generations
//      "profiles_db_location": "taken from configs"
    },

  "server": {
      "host": ""
    }, // Unimportant for this one, should be taken care of by TREX-Core
  "sim_controller": {"kill_list_name": null}, //these will be edited at startup time from the gym agent

  "training": {
      "curriculum": {}
    }, // Unimportant for this one

    "market": {
      "id": "",
      "type": "MicroTE3DCM_even_simpler",
      // no batteries             no market: 0
      // Greedy (-net_set)        no market:   114.4201340612415
      // no batteries             market:       60.40023237668403
      // Greedy (-net_set)        market:      141.51531949
      // TC baseline              market:      144.9
      "close_steps": 2,
      "grid": {
        "price": 0.069,
        "fee_ratio": 1.1
      }
    }, // do not change, the market will stay fixed

    "participants": {

    "Building_1": {
      // I'd recommend keeping the name the same as the name of the synthetic profile
      "type": "Residential",
      "trader": {
        "track_metrics": false,
        "type": "gym_agent",
        "actions": {
          "price_ask": {
            "heuristic": "fixed",
            "max": 0.1449,
            "min": 0.069
          },
          // "learned, keep the min and max the same as the market
          "quantity_ask": {
            "heuristic": "netload",
            "max": 10,
            "min": 0
          },
          // "learned, adjust the  max accordingly? Min need to stay at 0

          "price_bid": {
            "heuristic": "fixed",
            "max": 0.1449,
            "min": 0.069
          },
          // "learned, keep the min and max the same as the market
          "quantity_bid": {
            "heuristic": "netload",
            "max": 10,
            "min": 0
          },
          // "learned, adjust the max accordingly? Min need to stay at 0
          "storage": {
            "heuristic": "learned",
            "max": 5000,
            "min": -5000
          }
          //"learned", "greedy"
        },
        "learning": true,
        "observations": [
          "daytime_sin",
          "daytime_cos",
          "yeartime_sin",
          "yeartime_cos",
          "netload_settle", //"netload_deliver", "netload_settle", "netload_now",
          "SoC_settle", //SoC, Need to check if this actyuall works!!!!

          "actual_netload_now",

          "avg_bid_price",
          "total_bid_quantity",
          "avg_ask_price",
          "total_ask_quantity"

          //"avg_ask_quantity",       // might not be needed since market settles in expecation
          // "avg_bid_quantity",      // might not be needed since market settles in expecation
          //"std_ask_quantity",       // might not be needed since market settles in expecation
          // "std_bid_quantity",      // might not be needed since market settles in expecation
          //"total_settled_quantity", // might not be needed since it can be inferred from the other quantities
        ],
        //
        "reward_function": "net_profit",
        // "economic_advantage", "net_profit", "grid_equivalent"
        "use_synthetic_profile": "Building_1"
      },
      "load": {
        "scale": 1
      },
      // do not change, the load will stay fixed at scale 1
      "generation": {
        "scale": 1
      },
      // do not change, the generation will stay fixed at scale 1
      "storage": {
        // (optional) Defines the storage system to be attached to a participant
        "type": "Bess",
        // storage type, must exist in devices
        "capacity": 6400,
        // Usable capacity defined in Wh
        "power": 5000,
        // constant charge/discharge rate defined in W
        "efficiency": 0.95,
        // one way efficiency. round-trip efficiency is efficiency^2
        "monthly_sdr": 0.05
        // monthly self-discharge rate as a fraction of usable capacity
      }
    },

    "Building_17": {
      // I'd recommend keeping the name the same as the name of the synthetic profile
      "type": "Residential",
      "trader": {
        "track_metrics": false,
        "type": "gym_agent",
        "actions": {
          "price_ask": {
            "heuristic": "fixed",
            "max": 0.1449,
            "min": 0.069
          },
          // "learned, keep the min and max the same as the market
          "quantity_ask": {
            "heuristic": "netload",
            "max": 10,
            "min": 0
          },
          // "learned, adjust the  max accordingly? Min need to stay at 0

          "price_bid": {
            "heuristic": "fixed",
            "max": 0.1449,
            "min": 0.069
          },
          // "learned, keep the min and max the same as the market
          "quantity_bid": {
            "heuristic": "netload",
            "max": 10,
            "min": 0
          },
          // "learned, adjust the max accordingly? Min need to stay at 0
          "storage": {
            "heuristic": "learned",
            "max": 5000,
            "min": -5000
          }
          //"learned", "greedy"
        },
        "learning": true,
        "observations": [
          "daytime_sin",
          "daytime_cos",
          "yeartime_sin",
          "yeartime_cos",
          "netload_settle", //"netload_deliver", "netload_settle", "netload_now",
          "SoC_settle", //SoC, Need to check if this actyuall works!!!!

          "actual_netload_now",

          "avg_bid_price",
          "total_bid_quantity",
          "avg_ask_price",
          "total_ask_quantity"

          //"avg_ask_quantity",       // might not be needed since market settles in expecation
          // "avg_bid_quantity",      // might not be needed since market settles in expecation
          //"std_ask_quantity",       // might not be needed since market settles in expecation
          // "std_bid_quantity",      // might not be needed since market settles in expecation
          //"total_settled_quantity", // might not be needed since it can be inferred from the other quantities
        ],
        //
        "reward_function": "net_profit",
        // "economic_advantage", "net_profit"
        "use_synthetic_profile": "Building_17"
      },
      "load": {
        "scale": 1
      },
      // do not change, the load will stay fixed at scale 1
      "generation": {
        "scale": 1
      },
      // do not change, the generation will stay fixed at scale 1
      "storage": {
        // (optional) Defines the storage system to be attached to a participant
        "type": "Bess",
        // storage type, must exist in devices
        "capacity": 6400,
        // Usable capacity defined in Wh
        "power": 5000,
        // constant charge/discharge rate defined in W
        "efficiency": 0.95,
        // one way efficiency. round-trip efficiency is efficiency^2
        "monthly_sdr": 0.05
        // monthly self-discharge rate as a fraction of usable capacity
      }
    }
    }
  }
  